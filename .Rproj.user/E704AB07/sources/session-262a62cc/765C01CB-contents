
# app_mirror.R
# U20 Technique Checklist — Mirrors Excel content statically (no Excel read at runtime)

library(shiny)
library(DT)
library(dplyr)
library(glue)
library(lubridate)
library(purrr)
library(stringr)

# ---- Static content parsed from your Excel (Andy Inxter sheet) ----
checklist <- 
list(
  "Offset" = list(
    "Category" = c("Shin, torso and forearm angle are  at appropriate angle to terrain and approximately the same angle", "Knee is driven forward on glide ski to initiate forward momentum from the kick ski", "Skier is choosing to switch skis in purposeful manner and not falling onto other side", "Elbows and shoulders flexed in a strong starting position at 80-100 degrees creating  close to vertical pole plant", "different force is created throughout movement cycle (greater force during force creation phase)", "arms return fast enough to have time to place poles in a vertical angle if needed", "Body weight is stacked on the front half of the foot while driving the tip of ski in before or at a similar time as the rear of the ski", "Create a short amount of time between power lines", "The weight is fully over the glide leg and kick leg raises into the air (only one ski on ground at a time )", "Body leans slightly forward with poles ready to be set down vertically (dependant on ground speed)", "creation of a power & impulse starts under  COM and leaves the ground in a timely manner for grade and snow condition", "a preparation phase before each pole plant allowing muscles to relax and set before pole plant occurs", "Pole tips apply maximum power approximately next to the foot just after stretch shortening cycle of arms", "power line is maintained until force creation is started", "skier is coming from an almost straight body position and getting the poles up to prepare for pole plant", "ground force from kick leg moves the body forward onto the glide ski. (not up or to the side)")
  ),
  "One-Skate" = list(
    "Category" = c("Shin, torso and forearm angle are  at appropriate angle to terrain and approximately the same angle", "Knee is driven forward on glide ski to initiate forward momentum from the kick ski", "Skier is choosing to switch skis in purposeful manner and not falling onto other side", "Elbows and shoulders flexed in a strong starting position at 80-100 degrees creating  close to vertical pole plant", "different force is created throughout movement cycle (greater force during force creation phase)", "arms return fast enough to have time to place poles in a vertical angle if needed", "Body weight is stacked on the front half of the foot while driving the tip of ski in before or at a similar time as the rear of the ski", "Create a short amount of time between power lines", "The weight is fully over the glide leg and kick leg raises into the air (only one ski on ground at a time )", "Body leans slightly forward with poles ready to be set down vertically (dependant on ground speed)", "creation of a power & impulse starts under  COM and leaves the ground in a timely manner for grade and snow condition", "a preparation phase before each pole plant allowing muscles to relax and set before pole plant occurs", "Pole tips apply maximum power approximately next to the foot just after stretch shortening cycle of arms", "power line is maintained until force creation is started", "skier is coming from an almost straight body position and getting the poles up to prepare for pole plant", "ground force from kick leg moves the body forward onto the glide ski. (not up or to the side)")
  ),
  "Diagonal Stride" = list(
    "Category" = c("Shin, torso and forearm angle are  at appropriate angle to terrain and approximately the same angle", "Knee is driven forward on glide ski to initiate forward momentum from the kick ski", "Skier is choosing to switch skis in purposeful manner and not falling onto other side", "Elbows and shoulders flexed in a strong starting position at 80-100 degrees creating  close to vertical pole plant", "different force is created throughout movement cycle (greater force during force creation phase)", "arms return fast enough to have time to place poles in a vertical angle if needed", "Body weight is stacked on the front half of the foot while driving the tip of ski in before or at a similar time as the rear of the ski", "Create a short amount of time between power lines", "The weight is fully over the glide leg and kick leg raises into the air (only one ski on ground at a time )", "Body leans slightly forward with poles ready to be set down vertically (dependant on ground speed)", "creation of a power & impulse starts under  COM and leaves the ground in a timely manner for grade and snow condition", "a preparation phase before each pole plant allowing muscles to relax and set before pole plant occurs", "Pole tips apply maximum power approximately next to the foot just after stretch shortening cycle of arms", "power line is maintained until force creation is started", "skier is coming from an almost straight body position and getting the poles up to prepare for pole plant", "ground force from kick leg moves the body forward onto the glide ski. (not up or to the side)")
  ),
  "Double Pole" = list(
    "Category" = c("high starting position with aggressive body angle of 70-75 degrees", "body is balanced (COM) on mid foot at end of pole plant with upper body being used as a counterweight to hips to maintain position", "Elbows and shoulders flexed in a strong starting position at 80-100 degrees creating  close to vertical pole plant", "hips flex, knee drive  forward and torso goes down at same time  to load the poles", "shin angle is maintained at 70-75 degrees at end of pole plant and the body is drawn forward and extended to high starting position to start cycle again", "torso leans slightly forward with poles ready to be set down vertically (dependant on ground speed)", "high speed movement of downward and forward movemnt of upperbody", "Pole tips apply maximum power approximately next to the foot just after stretch shortening cycle of arms")
  )
)

# ---- Config ----
data_dir <- "data"
if (!dir.exists(data_dir)) dir.create(data_dir, recursive = TRUE)
master_csv <- file.path(data_dir, "master_submissions_long.csv")

status_choices <- c("Observed", "Needs work", "Not observed", "N/A")

# flatten checklist into a data frame template
template <- imap_dfr(checklist, function(cats, section) {
  imap_dfr(cats, function(items, category) {
    tibble(Section = section, Category = category, Cue = items)
  })
}) %>% mutate(
  Status = factor(NA, levels = status_choices),
  Comment = NA_character_
)

# ---- UI ----
ui <- fluidPage(
  titlePanel("U20 Technique Checklist — Data Entry (Excel-mirrored)"),
  sidebarLayout(
    sidebarPanel(
      textInput("athlete", "Athlete name", placeholder = "First Last"),
      selectInput("sex", "Sex", choices = c("", "Female", "Male", "Non-binary", "Prefer not to say")),
      dateInput("date", "Date", value = Sys.Date()),
      tags$hr(),
      actionButton("submit", "Submit & Save", class = "btn-primary"),
      br(), br(),
      verbatimTextOutput("status")
    ),
    mainPanel(
      tabsetPanel(
        id = "tabs",
        # tabs are rendered per-section below
        uiOutput("section_tabs")
      ),
      hr(),
      h4("Preview all entries"),
      DTOutput("tbl_all")
    )
  )
)

# ---- Server ----
server <- function(input, output, session) {
  # reactive store of the working data frame
  r_df <- reactiveVal(template)

  # Build tabs dynamically
  output$section_tabs <- renderUI({
    secs <- unique(r_df()$Section)
    tabs <- lapply(secs, function(sec) {
      tabPanel(
        title = sec,
        h4(sec),
        uiOutput(paste0("ui_", gsub("[^A-Za-z0-9_]", "_", sec)))
      )
    })
    do.call(tabsetPanel, c(list(id="inner_tabs"), tabs))
  })

  # render per-section UI tables grouped by Category
  observe({
    df_all <- r_df()
    secs <- unique(df_all$Section)
    for (section_name in secs) {
      local({
        sec <- section_name
        safe_id <- gsub("[^A-Za-z0-9_]", "_", sec)
        output[[paste0("ui_", safe_id)]] <- renderUI({
          df_sec <- r_df() %>% filter(Section == sec)
          cats <- unique(df_sec$Category)
          if (length(cats) == 0) return(NULL)
          tagList(
            lapply(cats, function(cat) {
              df_cat <- df_sec %>% filter(Category == cat)
              wellPanel(
                h5(strong(cat)),
                do.call(tagList, lapply(seq_len(nrow(df_cat)), function(i) {
                  cue <- df_cat$Cue[i]
                  row_id <- which(r_df()$Section == sec & r_df()$Category == cat & r_df()$Cue == cue)[1]
                  sid <- paste0("status_", row_id)
                  cid <- paste0("comment_", row_id)
                  fluidRow(
                    column(6, div(style="padding-top:6px;", cue)),
                    column(3, selectInput(sid, NULL, choices = status_choices, selected = r_df()$Status[row_id], width="100%")),
                    column(3, textInput(cid, NULL, value = r_df()$Comment[row_id], placeholder = "Comments", width="100%"))
                  )
                }))
              )
            })
          )
        })
      })
    }
  })

  # keep r_df synced with the inputs dynamically
  observe({
    df <- r_df()
    for (row_id in seq_len(nrow(df))) {
      sid <- paste0("status_", row_id)
      cid <- paste0("comment_", row_id)
      s <- input[[sid]]
      c <- input[[cid]]
      if (!is.null(s)) df$Status[row_id] <- s
      if (!is.null(c)) df$Comment[row_id] <- c
    }
    r_df(df)
  })

  # preview table
  output$tbl_all <- renderDT({
    datatable(
      r_df(),
      options = list(scrollX = TRUE, pageLength = 10)
    )
  })

  # submit/save
  output$status <- renderText("")
  observeEvent(input$submit, {
    errs <- c()
    if (is.null(input$athlete) || !nzchar(trimws(input$athlete))) errs <- c(errs, "Athlete name is required.")
    if (is.null(input$sex) || !nzchar(trimws(input$sex))) errs <- c(errs, "Sex is required.")
    if (length(errs) > 0) {
      output$status <- renderText(paste(errs, collapse = "\n"))
      return(NULL)
    }

    stamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
    safe_name <- gsub("[^A-Za-z0-9_]+", "_", tolower(trimws(input$athlete)))
    submit_file <- file.path(data_dir, glue("submission_{stamp}_{safe_name}.csv"))

    out <- r_df() %>%
      mutate(
        Athlete = trimws(input$athlete),
        Sex = input$sex,
        Date = as.character(input$date),
        Submitted_At = as.character(Sys.time())
      ) %>%
      relocate(Athlete, Sex, Date, Submitted_At, .before = 1)

    # write individual submission
    write.csv(out, submit_file, row.names = FALSE, na = "")

    # append to master
    if (file.exists(master_csv)) {
      master <- read.csv(master_csv, check.names = FALSE, stringsAsFactors = FALSE)
      master <- bind_rows(master, out)
      write.csv(master, master_csv, row.names = FALSE, na = "")
    } else {
      write.csv(out, master_csv, row.names = FALSE, na = "")
    }

    output$status <- renderText(glue("Saved {nrow(out)} rows to {submit_file} and appended to {basename(master_csv)}."))
  })
}

shinyApp(ui, server)


# app_rubric.R (fixed)
# U20 Checklist — Subtechnique Rubric (0–5 scoring + comments)

library(shiny)
library(dplyr)
library(glue)
library(DT)

# ---- Config ----
data_dir <- "data"
if (!dir.exists(data_dir)) dir.create(data_dir, recursive = TRUE)
master_csv <- file.path(data_dir, "master_rubric_submissions.csv")

age_groups <- c("U18","U16","U14")
sex_choices <- c("Female", "Male", "Non-binary", "Prefer not to say")
score_choices <- as.character(0:5)

subtechniques <- c("Offset", "One-Skate", "Diagonal Stride", "Double Pole")
areas <- c("Power Position", "Reposition Phase", "Pole Plant", "Power Line", "Ski Lift", "Leg Kick/Push")

# helper to build safe id
safe_id <- function(x) gsub("[^A-Za-z0-9_]", "_", x)

# Pre-build the list of subtechnique tabs
subtech_tabs <- lapply(subtechniques, function(st) {
  tabPanel(
    title = st,
    h4(st),
    uiOutput(paste0("ui_", safe_id(st)))
  )
})

# ---- UI ----
ui <- fluidPage(
  titlePanel("U20 Technique Checklist — Rubric Entry"),
  sidebarLayout(
    sidebarPanel(
      textInput("athlete", "Athlete name", placeholder = "First Last"),
      selectInput("sex", "Sex", choices = c("", sex_choices)),
      selectInput("age_group", "Age Group", choices = c("", age_groups)),
      dateInput("date", "Date", value = Sys.Date()),
      tags$hr(),
      actionButton("submit", "Submit & Save", class = "btn-primary"),
      br(), br(),
      verbatimTextOutput("status")
    ),
    mainPanel(
      # IMPORTANT: splice tabPanel() list with do.call
      do.call(tabsetPanel, c(list(id = "tabs"), subtech_tabs)),
      hr(),
      h4("Preview all entries"),
      DTOutput("tbl_all")
    )
  )
)

# ---- Server ----
server <- function(input, output, session) {

  # Build per-subtechnique UI
  lapply(subtechniques, function(st) {
    output[[paste0("ui_", safe_id(st))]] <- renderUI({
      # a panel with one row per area: label, score (0-5), comment
      tagList(
        lapply(areas, function(ar) {
          sid <- paste0("score_", safe_id(st), "_", safe_id(ar))
          cid <- paste0("comment_", safe_id(st), "_", safe_id(ar))
          wellPanel(
            fluidRow(
              column(4, strong(ar)),
              column(3, selectInput(sid, "Score (0–5)", choices = score_choices, selected = "", width = "100%")),
              column(5, textInput(cid, "Comment", placeholder = "Short note", width = "100%"))
            )
          )
        })
      )
    })
  })

  # Reactive assembled table from inputs
  assembled <- reactive({
    req(input$athlete, input$sex, input$date, input$age_group)
    # build long-form rows
    rows <- list()
    for (st in subtechniques) {
      for (ar in areas) {
        sid <- paste0("score_", safe_id(st), "_", safe_id(ar))
        cid <- paste0("comment_", safe_id(st), "_", safe_id(ar))
        score <- input[[sid]]
        comm  <- input[[cid]]
        rows[[length(rows)+1]] <- data.frame(
          Athlete = trimws(input$athlete),
          Sex = input$sex,
          Age_Group = input$age_group,
          Date = as.character(input$date),
          Subtechnique = st,
          Area = ar,
          Score = ifelse(is.null(score) || score == "", NA, score),
          Comment = ifelse(is.null(comm)  || comm  == "", NA, comm),
          stringsAsFactors = FALSE, check.names = FALSE
        )
      }
    }
    dplyr::bind_rows(rows)
  })

  output$tbl_all <- renderDT({
    datatable(
      assembled(),
      options = list(scrollX = TRUE, pageLength = 12)
    )
  })

  output$status <- renderText("")

  observeEvent(input$submit, {
    errs <- c()
    if (is.null(input$athlete) || !nzchar(trimws(input$athlete))) errs <- c(errs, "Athlete name is required.")
    if (is.null(input$sex) || !nzchar(trimws(input$sex))) errs <- c(errs, "Sex is required.")
    if (is.null(input$age_group) || !nzchar(trimws(input$age_group))) errs <- c(errs, "Age Group is required.")
    if (length(errs) > 0) {
      output$status <- renderText(paste(errs, collapse = "\n"))
      return(NULL)
    }

    out <- assembled() %>%
      mutate(Submitted_At = as.character(Sys.time())) %>%
      relocate(Submitted_At, .after = Date)

    stamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
    safe_name <- gsub("[^A-Za-z0-9_]+", "_", tolower(trimws(input$athlete)))
    submit_file <- file.path(data_dir, glue("rubric_{stamp}_{safe_name}.csv"))

    # write individual submission
    write.csv(out, submit_file, row.names = FALSE, na = "")

    # append to master
    if (file.exists(master_csv)) {
      master <- read.csv(master_csv, check.names = FALSE, stringsAsFactors = FALSE)
      master <- dplyr::bind_rows(master, out)
      write.csv(master, master_csv, row.names = FALSE, na = "")
    } else {
      write.csv(out, master_csv, row.names = FALSE, na = "")
    }

    output$status <- renderText(glue("Saved {nrow(out)} rows to {submit_file} and appended to {basename(master_csv)}."))
  })
}

shinyApp(ui, server)

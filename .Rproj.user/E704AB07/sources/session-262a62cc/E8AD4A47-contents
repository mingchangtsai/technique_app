
# app_rubric_v3.R
# U20 Technique Checklist — Rubric with master DB + athlete recall
# - Master DB: data/master_rubric_submissions.csv
# - Athlete dropdown populated from master (type to add new)
# - Prefill scores/comments (and Sex/Age Group) from latest prior entry

library(shiny)
library(dplyr)
library(glue)
library(DT)
library(purrr)
library(stringr)
library(readr)

# ---- Config ----
data_dir <- "data"
if (!dir.exists(data_dir)) dir.create(data_dir, recursive = TRUE)
master_csv <- file.path(data_dir, "master_rubric_submissions.csv")

age_groups <- c("U18","U16","U14")
sex_choices <- c("Female", "Male", "Non-binary", "Prefer not to say")

# Helper: safe id
safe_id <- function(x) gsub("[^A-Za-z0-9_]", "_", x)

# ---- Rubric definition (Offset implemented as specified) ----
rubric <- list(
  "Offset" = list(
    "Power Position" = c(
      "Shin, torso and forearm angle are  at appropriate angle to terrain and approximately the same angle",
      "Body weight is stacked on the front half of the foot while driving the tip of ski in before or at a similar time as the rear of the ski",
      "Pole tips apply maximum power approximately next to the foot just after stretch shortening cycle of arms"
    ),
    "Power Line" = c(
      "Knee is driven forward on glide ski to initiate forward momentum from the kick ski",
      "Create a short amount of time between power lines",
      "power line is maintained until force creation is started"
    ),
    "Ski Lift" = c(
      "Skier is choosing to switch skis in purposeful manner and not falling onto other side",
      "The weight is fully over the glide leg and kick leg raises into the air\u00A0(only one ski on ground at a time)"
    ),
    "Pole Plant" = c(
      "Elbows and shoulders flexed in a strong starting position at 80-100 degrees creating  close to vertical pole plant",
      "Body leans slightly forward with poles ready to be set down vertically (dependant on ground speed)",
      "skier is coming from an almost straight body position and getting the poles up to prepare for pole plant"
    ),
    "Reposition Phase" = c(
      "arms return fast enough to have time to place poles in a vertical angle if needed",
      "a preparation phase before each pole plant allowing muscles to relax and set before pole plant occurs"
    )
  ),
  "One-Skate" = list(),
  "Diagonal Stride" = list(),
  "Double Pole" = list()
)

subtechniques <- names(rubric)

# ---- UI ----
ui <- fluidPage(
  titlePanel("U20 Technique Checklist — Rubric Entry (Master DB + Recall)"),
  sidebarLayout(
    sidebarPanel(
      # Athlete dropdown populated from master; selectize allows new entries
      selectizeInput("athlete", "Athlete name",
        choices = NULL,
        options = list(placeholder = "Type a name or pick from list", create = TRUE)
      ),
      selectInput("sex", "Sex", choices = c("", sex_choices)),
      selectInput("age_group", "Age Group", choices = c("", age_groups)),
      dateInput("date", "Date", value = Sys.Date()),
      tags$hr(),
      actionButton("submit", "Submit & Save", class = "btn-primary"),
      br(), br(),
      verbatimTextOutput("status")
    ),
    mainPanel(
      do.call(tabsetPanel, c(list(id = "tabs"),
        lapply(subtechniques, function(st) {
          tabPanel(
            title = st,
            h4(st),
            uiOutput(paste0("ui_", safe_id(st)))
          )
        })
      )),
      hr(),
      h4("Preview all entries"),
      DTOutput("tbl_all")
    )
  )
)

# ---- Server ----
server <- function(input, output, session) {

  # Load master DB (if exists) and populate athlete choices
  master_df <- reactiveVal({
    if (file.exists(master_csv)) {
      suppressMessages(readr::read_csv(master_csv, show_col_types = FALSE))
    } else {
      tibble(
        Athlete = character(),
        Sex = character(),
        Age_Group = character(),
        Date = character(),
        Submitted_At = character(),
        Subtechnique = character(),
        Area = character(),
        Item = character(),
        Score = integer(),
        Comment = character()
      )
    }
  })

  observe({
    df <- master_df()
    athletes <- sort(unique(df$Athlete[df$Athlete != ""]))
    updateSelectizeInput(session, "athlete", choices = athletes, server = TRUE)
  })

  # Build dynamic UI for each subtechnique
  lapply(subtechniques, function(st) {
    output[[paste0("ui_", safe_id(st))]] <- renderUI({
      st_list <- rubric[[st]]
      if (length(st_list) == 0) {
        return(div(em("No items configured yet for this subtechnique.")))
      }
      tagList(
        lapply(names(st_list), function(area) {
          items <- st_list[[area]]
          wellPanel(
            h5(strong(area)),
            do.call(tagList, lapply(seq_along(items), function(i) {
              item <- items[[i]]
              sid <- paste0("score_", safe_id(st), "_", safe_id(area), "_", i)
              cid <- paste0("comment_", safe_id(st), "_", safe_id(area), "_", i)
              fluidRow(
                column(6, div(style="padding-top:6px;", item)),
                column(2, numericInput(sid, "Score (0–5)", value = NA, min = 0, max = 5, step = 1, width = "100%")),
                column(4, textInput(cid, "Comment", placeholder = "Short note", width = "100%"))
              )
            }))
          )
        })
      )
    })
  })

  # Prefill logic: when athlete changes, load their latest prior entry and update inputs
  observeEvent(input$athlete, {
    req(input$athlete)
    df <- master_df()
    df_a <- df %>% filter(Athlete == input$athlete)
    if (nrow(df_a) == 0) {
      # Clear Sex/Age Group and all inputs for fresh entry
      updateSelectInput(session, "sex", selected = "")
      updateSelectInput(session, "age_group", selected = "")
      # Date stays as today
      # Clear all scores/comments
      for (st in subtechniques) {
        st_list <- rubric[[st]]
        if (length(st_list) == 0) next
        for (area in names(st_list)) {
          items <- st_list[[area]]
          for (i in seq_along(items)) {
            sid <- paste0("score_", safe_id(st), "_", safe_id(area), "_", i)
            cid <- paste0("comment_", safe_id(st), "_", safe_id(area), "_", i)
            updateNumericInput(session, sid, value = NA)
            updateTextInput(session, cid, value = "")
          }
        }
      }
      return()
    }
    # Latest by Submitted_At (fallback to Date)
    df_a$Submitted_At <- suppressWarnings(lubridate::ymd_hms(df_a$Submitted_At, quiet = TRUE))
    df_a$Date <- suppressWarnings(lubridate::ymd(df_a$Date, quiet = TRUE))
    df_a <- df_a %>% arrange(dplyr::desc(Submitted_At), dplyr::desc(Date))
    latest <- df_a %>% group_by(Subtechnique, Area, Item) %>% slice(1) %>% ungroup()

    # Prefill Sex/Age Group from most recent row
    row_meta <- df_a %>% slice(1)
    if (!is.na(row_meta$Sex[1])) updateSelectInput(session, "sex", selected = row_meta$Sex[1])
    if (!is.na(row_meta$Age_Group[1])) updateSelectInput(session, "age_group", selected = row_meta$Age_Group[1])
    # keep Date as today (do not backfill old date)

    # Prefill scores/comments per item
    for (st in subtechniques) {
      st_list <- rubric[[st]]
      if (length(st_list) == 0) next
      for (area in names(st_list)) {
        items <- st_list[[area]]
        for (i in seq_along(items)) {
          item <- items[[i]]
          sid <- paste0("score_", safe_id(st), "_", safe_id(area), "_", i)
          cid <- paste0("comment_", safe_id(st), "_", safe_id(area), "_", i)
          row <- latest %>% filter(Subtechnique == st, Area == area, Item == item)
          if (nrow(row) > 0) {
            sc <- suppressWarnings(as.numeric(row$Score[1]))
            cm <- row$Comment[1]
            updateNumericInput(session, sid, value = ifelse(is.na(sc), NA, sc))
            updateTextInput(session, cid, value = ifelse(is.na(cm), "", cm))
          } else {
            updateNumericInput(session, sid, value = NA)
            updateTextInput(session, cid, value = "")
          }
        }
      }
    }
  }, ignoreInit = TRUE)

  # Assemble long-form table from inputs
  assembled <- reactive({
    req(input$athlete, input$sex, input$date, input$age_group)
    rows <- list()
    for (st in subtechniques) {
      st_list <- rubric[[st]]
      if (length(st_list) == 0) next
      for (area in names(st_list)) {
        items <- st_list[[area]]
        for (i in seq_along(items)) {
          item <- items[[i]]
          sid <- paste0("score_", safe_id(st), "_", safe_id(area), "_", i)
          cid <- paste0("comment_", safe_id(st), "_", safe_id(area), "_", i)
          score <- input[[sid]]
          comm  <- input[[cid]]
          rows[[length(rows)+1]] <- data.frame(
            Athlete      = trimws(input$athlete),
            Sex          = input$sex,
            Age_Group    = input$age_group,
            Date         = as.character(input$date),
            Submitted_At = as.character(Sys.time()),
            Subtechnique = st,
            Area         = area,
            Item         = item,
            Score        = score,
            Comment      = ifelse(is.null(comm) || comm == "", NA, comm),
            stringsAsFactors = FALSE, check.names = FALSE
          )
        }
      }
    }
    dplyr::bind_rows(rows)
  })

  output$tbl_all <- renderDT({
    datatable(
      assembled(),
      options = list(scrollX = TRUE, pageLength = 12)
    )
  })

  output$status <- renderText("")

  # Validate: whole number 0..5 for all items
  validate_scores <- function(df) {
    bad <- df %>%
      mutate(
        score_num = suppressWarnings(as.numeric(Score)),
        score_int = suppressWarnings(as.integer(Score)),
        is_int = !is.na(score_num) & !is.na(score_int) & (score_num == score_int),
        in_range = !is.na(score_num) & score_num >= 0 & score_num <= 5
      ) %>%
      filter(!(is_int & in_range))
    bad
  }

  observeEvent(input$submit, {
    errs <- c()
    if (is.null(input$athlete) || !nzchar(trimws(input$athlete))) errs <- c(errs, "Athlete name is required.")
    if (is.null(input$sex) || !nzchar(trimws(input$sex))) errs <- c(errs, "Sex is required.")
    if (is.null(input$age_group) || !nzchar(trimws(input$age_group))) errs <- c(errs, "Age Group is required.")

    out <- assembled()

    # Require all scores filled and valid integers 0..5 for configured items
    if (any(is.na(out$Score))) {
      missing <- out %>% filter(is.na(Score)) %>% select(Subtechnique, Area, Item)
      errs <- c(errs, glue("Missing score(s) for {nrow(missing)} item(s). Please complete all scores."))
    } else {
      bad <- validate_scores(out)
      if (nrow(bad) > 0) {
        preview <- paste0(utils::head(glue("- {bad$Subtechnique} / {bad$Area}: '{bad$Item}' (got '{bad$Score}')"), 5), collapse = "\n")
        errs <- c(errs, "Scores must be whole numbers 0–5. Please fix:\n", preview)
      }
    }

    if (length(errs) > 0) {
      output$status <- renderText(paste(errs, collapse = "\n"))
      return(NULL)
    }

    # Append to master and refresh reactive store
    if (file.exists(master_csv)) {
      readr::write_csv(out, master_csv, append = TRUE)
    } else {
      readr::write_csv(out, master_csv)
    }
    output$status <- renderText(glue("Saved {nrow(out)} rows to the master database: {basename(master_csv)}"))

    # refresh master reactive for new names
    master_df({
      suppressMessages(readr::read_csv(master_csv, show_col_types = FALSE))
    })
  })
}

shinyApp(ui, server)

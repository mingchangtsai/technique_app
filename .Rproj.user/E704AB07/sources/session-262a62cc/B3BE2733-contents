
# app_rubric_v2.R
# U20 Technique Checklist — Rubric with nested items (Offset implemented)
# - Athlete / Sex / Age Group (U18/U16/U14) / Date
# - Subtechnique tabs; Offset has Areas -> multiple Items, each with Score (0–5, integer) + Comment
# - Validates scores are whole numbers 0..5 before saving
# - Saves long-form CSV per submission + appends to master

library(shiny)
library(dplyr)
library(glue)
library(DT)
library(purrr)
library(stringr)

# ---- Config ----
data_dir <- "data"
if (!dir.exists(data_dir)) dir.create(data_dir, recursive = TRUE)
master_csv <- file.path(data_dir, "master_rubric_submissions.csv")

age_groups <- c("U18","U16","U14")
sex_choices <- c("Female", "Male", "Non-binary", "Prefer not to say")

# Helper: safe id
safe_id <- function(x) gsub("[^A-Za-z0-9_]", "_", x)

# ---- Rubric definition ----
rubric <- list(
  "Offset" = list(
    "Power Position" = c(
      "Shin, torso and forearm angle are  at appropriate angle to terrain and approximately the same angle",
      "Body weight is stacked on the front half of the foot while driving the tip of ski in before or at a similar time as the rear of the ski",
      "Pole tips apply maximum power approximately next to the foot just after stretch shortening cycle of arms"
    ),
    "Power Line" = c(
      "Knee is driven forward on glide ski to initiate forward momentum from the kick ski",
      "Create a short amount of time between power lines",
      "power line is maintained until force creation is started"
    ),
    "Ski Lift" = c(
      "Skier is choosing to switch skis in purposeful manner and not falling onto other side",
      "The weight is fully over the glide leg and kick leg raises into the air\u00A0(only one ski on ground at a time)"
    ),
    "Pole Plant" = c(
      "Elbows and shoulders flexed in a strong starting position at 80-100 degrees creating  close to vertical pole plant",
      "Body leans slightly forward with poles ready to be set down vertically (dependant on ground speed)",
      "skier is coming from an almost straight body position and getting the poles up to prepare for pole plant"
    ),
    "Reposition Phase" = c(
      "arms return fast enough to have time to place poles in a vertical angle if needed",
      "a preparation phase before each pole plant allowing muscles to relax and set before pole plant occurs"
    )
  ),
  # Placeholders for other subtechniques for now; we can fill these as you supply items
  "One-Skate" = list(),
  "Diagonal Stride" = list(),
  "Double Pole" = list()
)

subtechniques <- names(rubric)

# ---- UI ----
ui <- fluidPage(
  titlePanel("U20 Technique Checklist — Rubric Entry (Offset v2)"),
  sidebarLayout(
    sidebarPanel(
      textInput("athlete", "Athlete name", placeholder = "First Last"),
      selectInput("sex", "Sex", choices = c("", sex_choices)),
      selectInput("age_group", "Age Group", choices = c("", age_groups)),
      dateInput("date", "Date", value = Sys.Date()),
      tags$hr(),
      actionButton("submit", "Submit & Save", class = "btn-primary"),
      br(), br(),
      verbatimTextOutput("status")
    ),
    mainPanel(
      do.call(tabsetPanel, c(list(id = "tabs"),
        lapply(subtechniques, function(st) {
          tabPanel(
            title = st,
            h4(st),
            uiOutput(paste0("ui_", safe_id(st)))
          )
        })
      )),
      hr(),
      h4("Preview all entries"),
      DTOutput("tbl_all")
    )
  )
)

# ---- Server ----
server <- function(input, output, session) {

  # Build dynamic UI for each subtechnique
  lapply(subtechniques, function(st) {
    output[[paste0("ui_", safe_id(st))]] <- renderUI({
      st_list <- rubric[[st]]
      if (length(st_list) == 0) {
        return(div(em("No items configured yet for this subtechnique.")))
      }
      # Each Area becomes a wellPanel; each Item within has Score (numericInput 0..5, step 1) + Comment
      tagList(
        lapply(names(st_list), function(area) {
          items <- st_list[[area]]
          wellPanel(
            h5(strong(area)),
            do.call(tagList, lapply(seq_along(items), function(i) {
              item <- items[[i]]
              sid <- paste0("score_", safe_id(st), "_", safe_id(area), "_", i)
              cid <- paste0("comment_", safe_id(st), "_", safe_id(area), "_", i)
              fluidRow(
                column(6, div(style="padding-top:6px;", item)),
                column(2, numericInput(sid, "Score (0–5)", value = NA, min = 0, max = 5, step = 1, width = "100%")),
                column(4, textInput(cid, "Comment", placeholder = "Short note", width = "100%"))
              )
            }))
          )
        })
      )
    })
  })

  # Gather inputs into long-form data frame
  assembled <- reactive({
    req(input$athlete, input$sex, input$date, input$age_group)
    rows <- list()
    for (st in subtechniques) {
      st_list <- rubric[[st]]
      if (length(st_list) == 0) next
      for (area in names(st_list)) {
        items <- st_list[[area]]
        for (i in seq_along(items)) {
          item <- items[[i]]
          sid <- paste0("score_", safe_id(st), "_", safe_id(area), "_", i)
          cid <- paste0("comment_", safe_id(st), "_", safe_id(area), "_", i)
          score <- input[[sid]]
          comm  <- input[[cid]]
          rows[[length(rows)+1]] <- data.frame(
            Athlete      = trimws(input$athlete),
            Sex          = input$sex,
            Age_Group    = input$age_group,
            Date         = as.character(input$date),
            Subtechnique = st,
            Area         = area,
            Item         = item,
            Score        = score,
            Comment      = ifelse(is.null(comm) || comm == "", NA, comm),
            stringsAsFactors = FALSE, check.names = FALSE
          )
        }
      }
    }
    dplyr::bind_rows(rows)
  })

  output$tbl_all <- renderDT({
    datatable(
      assembled(),
      options = list(scrollX = TRUE, pageLength = 12)
    )
  })

  output$status <- renderText("")

  # Validation helper: ensure whole number 0..5 (or NA allowed if they truly want empty? Here we require score.)
  validate_scores <- function(df) {
    bad <- df %>%
      mutate(
        score_num = suppressWarnings(as.numeric(Score)),
        score_int = suppressWarnings(as.integer(Score)),
        is_int = !is.na(score_num) & !is.na(score_int) & (score_num == score_int),
        in_range = !is.na(score_num) & score_num >= 0 & score_num <= 5
      ) %>%
      filter(!(is_int & in_range))
    bad
  }

  observeEvent(input$submit, {
    errs <- c()
    if (is.null(input$athlete) || !nzchar(trimws(input$athlete))) errs <- c(errs, "Athlete name is required.")
    if (is.null(input$sex) || !nzchar(trimws(input$sex))) errs <- c(errs, "Sex is required.")
    if (is.null(input$age_group) || !nzchar(trimws(input$age_group))) errs <- c(errs, "Age Group is required.")

    df <- assembled()
    # Require all scores filled and valid integers 0..5
    if (any(is.na(df$Score))) {
      missing <- df %>% filter(is.na(Score)) %>% select(Subtechnique, Area, Item)
      errs <- c(errs, glue("Missing score(s) for {nrow(missing)} item(s). Please complete all scores."))
    } else {
      bad <- validate_scores(df)
      if (nrow(bad) > 0) {
        # show up to 5 bad items for convenience
        preview <- paste0(utils::head(glue("- {bad$Subtechnique} / {bad$Area}: '{bad$Item}' (got '{bad$Score}')"), 5), collapse = "\n")
        errs <- c(errs, "Scores must be whole numbers 0–5. Please fix:\n", preview)
      }
    }

    if (length(errs) > 0) {
      output$status <- renderText(paste(errs, collapse = "\n"))
      return(NULL)
    }

    out <- df %>%
      mutate(
        Score = as.integer(Score),
        Submitted_At = as.character(Sys.time())
      ) %>%
      relocate(Submitted_At, .after = Date)

    stamp <- format(Sys.time(), "%Y%m%d-%H%M%S")
    safe_name <- gsub("[^A-Za-z0-9_]+", "_", tolower(trimws(input$athlete)))
    submit_file <- file.path(data_dir, glue("rubric_{stamp}_{safe_name}.csv"))

    # write individual submission
    write.csv(out, submit_file, row.names = FALSE, na = "")

    # append to master
    if (file.exists(master_csv)) {
      master <- read.csv(master_csv, check.names = FALSE, stringsAsFactors = FALSE)
      master <- dplyr::bind_rows(master, out)
      write.csv(master, master_csv, row.names = FALSE, na = "")
    } else {
      write.csv(out, master_csv, row.names = FALSE, na = "")
    }

    output$status <- renderText(glue("Saved {nrow(out)} rows to {submit_file} and appended to {basename(master_csv)}."))
  })
}

shinyApp(ui, server)
